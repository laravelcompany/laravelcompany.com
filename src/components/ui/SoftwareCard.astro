---
import { formatDate } from "../../utils";
import type { CollectionEntry } from "astro:content";

import Card from "../ui/Card.astro";

const { software } = Astro.props;

interface Props {
    software: CollectionEntry<'software'>;
}

// Generate structured data for the software product
const structuredData = {
    "@context": "https://schema.org",
    "@type": "SoftwareApplication",
    "name": software.data.title,
    "description": software.data.summary,
    "url": `${Astro.site}software/${software.slug}`,
    "applicationCategory": software.data.category || "SoftwareApplication",
    "operatingSystem": software.data.operatingSystem || "Cross-platform",
    "softwareVersion": software.data.version || "Latest",
    "datePublished": software.data.publishDate ? formatDate(software.data.publishDate) : undefined,
    "dateModified": software.data.updatedDate ? formatDate(software.data.updatedDate) : undefined,
    "publisher": {
        "@type": "Organization",
        "name": software.data.publisher || "Your Company Name"
    },
    "author": software.data.author ? {
        "@type": "Person",
        "name": software.data.author
    } : undefined,
    "screenshot": software.data.image || software.data.screenshot,
    "downloadUrl": software.data.downloadUrl,
    "installUrl": software.data.installUrl,
    "softwareRequirements": software.data.requirements,
    "memoryRequirements": software.data.memoryRequirements,
    "processorRequirements": software.data.processorRequirements,
    "storageRequirements": software.data.storageRequirements,
    "permissions": software.data.permissions,
    "fileSize": software.data.fileSize,
    "softwareHelp": software.data.helpUrl,
    "releaseNotes": software.data.releaseNotesUrl,
    "license": software.data.license,
    "price": software.data.price || "0",
    "priceCurrency": software.data.priceCurrency || "USD",
    "offers": software.data.price ? {
        "@type": "Offer",
        "price": software.data.price,
        "priceCurrency": software.data.priceCurrency || "USD",
        "availability": "https://schema.org/InStock"
    } : undefined,
    "aggregateRating": software.data.rating ? {
        "@type": "AggregateRating",
        "ratingValue": software.data.rating.value,
        "ratingCount": software.data.rating.count,
        "bestRating": software.data.rating.best || 5,
        "worstRating": software.data.rating.worst || 1
    } : undefined,
    "review": software.data.reviews?.map(review => ({
        "@type": "Review",
        "author": {
            "@type": "Person",
            "name": review.author
        },
        "datePublished": review.date,
        "reviewBody": review.body,
        "reviewRating": {
            "@type": "Rating",
            "ratingValue": review.rating,
            "bestRating": 5,
            "worstRating": 1
        }
    })),
    "featureList": software.data.features,
    "keywords": software.data.tags?.join(", ")
};

// Remove undefined properties
const cleanStructuredData = JSON.parse(JSON.stringify(structuredData, (key, value) => {
    return value === undefined ? undefined : value;
}));
---

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(cleanStructuredData)}></script>

<Card isUnderline={true}>
    <article class="p-6" itemscope itemtype="https://schema.org/SoftwareApplication">

        <h2 class="mb-2 text-2xl font-bold tracking-tight text-gray-900" itemprop="name">{software.data.title}</h2>
        <p class="mb-5 font-light text-gray-500" style="white-space: pre-line" itemprop="description">{software.data.summary}</p>

        <!-- Hidden structured data elements -->
        {software.data.category && <meta itemprop="applicationCategory" content={software.data.category} />}
        {software.data.version && <meta itemprop="softwareVersion" content={software.data.version} />}
        {software.data.operatingSystem && <meta itemprop="operatingSystem" content={software.data.operatingSystem} />}
        {software.data.publishDate && <meta itemprop="datePublished" content={formatDate(software.data.publishDate)} />}
        {software.data.updatedDate && <meta itemprop="dateModified" content={formatDate(software.data.updatedDate)} />}
        {software.data.downloadUrl && <meta itemprop="downloadUrl" content={software.data.downloadUrl} />}
        {software.data.installUrl && <meta itemprop="installUrl" content={software.data.installUrl} />}
        {software.data.fileSize && <meta itemprop="fileSize" content={software.data.fileSize} />}
        {software.data.license && <meta itemprop="license" content={software.data.license} />}

        <a href={'/software/' + software.slug}
           class="inline-flex items-center font-medium text-black hover:text-green"
           itemprop="url">
            Read more
            <svg class="ml-2 w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
        </a>
    </article>
</Card>